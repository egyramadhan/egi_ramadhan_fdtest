openapi: 3.0.3
info:
  title: Egi Ramadhan FD Test API
  description: Full-stack application API with authentication and book management
  version: 1.0.0
  contact:
    name: Egi Ramadhan
    email: egi@example.com

servers:
  - url: http://localhost:5000
    description: Development server

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  minLength: 2
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: User registered successfully
        '409':
          description: Email already exists
        '400':
          description: Validation error

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
        '401':
          description: Invalid refresh token

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Logout successful

  /api/auth/forgot:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset email sent

  /api/auth/reset:
    post:
      tags:
        - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token

  /api/auth/verify-email:
    get:
      tags:
        - Authentication
      summary: Verify email address
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired token

  /api/users:
    get:
      tags:
        - Users
      summary: Get users list (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: Search by name or email
        - name: verified
          in: query
          schema:
            type: boolean
          description: Filter by verification status
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Users list retrieved successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

  /api/users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
        '401':
          description: Unauthorized

  /api/users/me/password:
    patch:
      tags:
        - Users
      summary: Change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid current password
        '401':
          description: Unauthorized

  /api/books:
    get:
      tags:
        - Books
      summary: Get books list
      parameters:
        - name: author
          in: query
          schema:
            type: string
        - name: rating
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Books list retrieved successfully
    post:
      tags:
        - Books
      summary: Create a new book
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - author
                - description
                - rating
              properties:
                title:
                  type: string
                author:
                  type: string
                description:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                thumbnail:
                  type: string
                  format: binary
                thumbnailUrl:
                  type: string
                  format: uri
      responses:
        '201':
          description: Book created successfully
        '400':
          description: Validation error
        '401':
          description: Unauthorized

  /api/books/{id}:
    get:
      tags:
        - Books
      summary: Get book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book retrieved successfully
        '404':
          description: Book not found
    patch:
      tags:
        - Books
      summary: Update book
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                description:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                thumbnail:
                  type: string
                  format: binary
                thumbnailUrl:
                  type: string
                  format: uri
      responses:
        '200':
          description: Book updated successfully
        '404':
          description: Book not found
        '401':
          description: Unauthorized
        '403':
          description: Not authorized to update this book
    delete:
      tags:
        - Books
      summary: Delete book
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book deleted successfully
        '404':
          description: Book not found
        '401':
          description: Unauthorized
        '403':
          description: Not authorized to delete this book

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        emailVerifiedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        description:
          type: string
        thumbnailUrl:
          type: string
          format: uri
        rating:
          type: integer
          minimum: 1
          maximum: 5
        createdBy:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: object